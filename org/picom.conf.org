#+TITLE: Picom Configuration
#+PROPERTY: header-args:conf :tangle ../config/picom.conf :mkdirp yes :comments org
#+OPTIONS: ^:{}

Thank you [[http://9m.no/ꪯ鵞][code_nomad]] and [[https://wiki.archlinux.org/index.php/Compton][Arch Wiki contributors]]

* Backend
** Setting the Backend
Backend to use: "xrender" or "glx".
GLX backend is typically much faster but depends on a sane driver.
#+begin_src conf
  backend = "glx";
#+end_src
** GLX Backend
#+begin_src conf
  glx-no-stencil = true;
#+end_src
GLX backend: Copy unmodified regions from front buffer instead of redrawing them all.
Tests with nvidia-drivers show a 10% decrease in performance when the whole screen is modified,
but a 20% increase when only 1/4 is.
Tests on nouveau show terrible slowdown.
#+begin_src conf
  glx-copy-from-front = false;
#+end_src
#+begin_src conf
  # glx-use-copysubbuffermesa = true;
#+end_src
GLX backend: Avoid rebinding pixmap on window damage.
Probably could improve performance on rapid window content changes, but is known to break things on some drivers (LLVMpipe).
Recommended if it works.
#+begin_src conf
  # glx-no-rebind-pixmap = true;
#+end_src
GLX backend: GLX buffer swap method we assume.
Could be undefined (0), copy (1), exchange (2), 3-6, or buffer-age (-1).
undefined is the slowest and the safest, and the default value.
copy is fastest, but may fail on some drivers,
2-6 are gradually slower but safer (6 is still faster than 0).
Usually, double buffer means 2, triple buffer means 3.
buffer-age means auto-detect using GLX_EXT_buffer_age, supported by some drivers.
Useless with --glx-use-copysubbuffermesa.
Partially breaks --resize-damage.
Defaults to undefined.
#+begin_src conf
  #glx-swap-method = "undefined"; #deprecated !
  #use-damage = true
#+end_src
* Shadows
** Basic Config
#+begin_src conf
  # Enabled client-side shadows on windows.
  shadow = true;
  # The blur radius for shadows. (default 12)
  shadow-radius = 5;
  # The left offset for shadows. (default -15)
  shadow-offset-x = 1;
  # The top offset for shadows. (default -15)
  shadow-offset-y = 1;
  # The translucency for shadows. (default .75)
  shadow-opacity = 0.3;
#+end_src
** Different Color Shadows
Set if you want different colow shadows
#+begin_src conf
  # shadow-red = 0.0;
  # shadow-green = 0.0;
  # shadow-blue = 0.0;
#+end_src
** Shadow Excludes
The shadow exclude options are helpful if you have shadows enabled. Due to the way picom draws its shadows, certain applications will have visual glitches
(most applications are fine, only apps that do weird things with xshapes or argb are affected).
This list includes all the affected apps I found in my testing. The "! name~=''" part excludes shadows on any "Unknown" windows, this prevents a visual glitch with the XFWM alt tab switcher.
#+begin_src conf
  shadow-exclude = [
  "argb && (_NET_WM_WINDOW_TYPE@:a *= 'MENU' || _NET_WM_WINDOW_TYPE@:a *= 'COMBO')",
  "!I3_FLOATING_WINDOW@:c",
  "! name~=''",
  "name = 'Notification'",
  "name = 'Plank'",
  "name = 'Docky'",
  "name = 'Kupfer'",
  "name = 'xfce4-notifyd'",
  "name *= 'VLC'",
  "name *= 'compton'",
  "name *= 'picom'",
  "name *= 'Chromium'",
  "name *= 'Chrome'",
  "name *= 'Ubisoft'",
  "class_g = 'Firefox' && argb",
  "name ?= 'Firefox' && window_type = 'utility'",
  "class_g = 'Conky'",
  "class_g = 'Kupfer'",
  "class_g = 'Synapse'",
  "class_g ?= 'Notify-osd'",
  "class_g ?= 'Cairo-dock'",
  "class_g ?= 'Xfce4-notifyd'",
  "class_g ?= 'Xfce4-power-manager'",
  "class_g ?= 'Dmenu'",
  "class_g ?= 'Rofi'",
  "class_g ?= 'Dunst'",
  "class_g ?= 'plasmashell'",
  # disables shadows on i3 frames
  # "class_g ?= 'i3-frame'",
  "_GTK_FRAME_EXTENTS@:c",
  "_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'"
  ];
#+end_src
Avoid drawing shadow on all shaped windows (see also: --detect-rounded-corners)
#+begin_src conf
  shadow-ignore-shaped = false;
#+end_src
* Borders
** Rounded Corners
  Add rounded corners to everything except polybar
#+begin_src conf
  corner-radius = 7;
  rounded-corners-exclude = [
    "class_g = 'Polybar'"
  ];

  round-borders = 1;
  round-borders-rule = [
   # "5:window_type      = 'normal'",
  ];
#+end_src
* Opacity
** Basic Config
#+begin_src conf
  inactive-opacity = 1;
  active-opacity = 1;
  frame-opacity = 1;
  inactive-opacity-override = false;
  # Dim inactive windows. (0.0 - 1.0)
  inactive-dim = 0.2;
  # Do not let dimness adjust based on window opacity.
  inactive-dim-fixed = true;
  # Blur background of transparent windows. Bad performance with X Render backend. GLX backend is preferred.
#+end_src
** Blur
#+begin_src conf
  blur-background = false;
  # Blur background of opaque windows with transparent frames as well.
  blur-background-frame = false;
  # Do not let blur radius adjust based on window opacity.
  blur-background-fixed = false;
  blur:
  {
  method = "dual_kawase";
  strength = 3;
  };
  blur-background-exclude = [
  "(_NET_WM_WINDOW_TYPE@:a *= 'MENU' || _NET_WM_WINDOW_TYPE@:a *= 'COMBO')",
  "window_type = 'dock'",
  "class_g = 'Peek'", 
  "name *= 'Ubisoft'",
  "class_g = 'Firefox' && argb",
  "name ?= 'Firefox' && window_type = 'utility'",
  "name *= 'KDE Connect Daemon'",
  "window_type = 'desktop'"
  ];
#+end_src
** Opacity rules
#+begin_src conf
  opacity-rule = [ 
  "0:_NET_WM_STATE@[0]:32a = '_NET_WM_STATE_HIDDEN'",
  #"99:name *?= 'Call'", 
  #"99:class_g = 'Chromium'", 
  #"99:name *?= 'Conky'", 
  #"99:class_g = 'Darktable'", 
  #"50:class_g = 'Dmenu'", 
  #"99:name *?= 'Event'", 
  #"50:WM_WINDOW_ROLE = 'browser'",
  #"99:class_g = 'GIMP'", 
  #"99:name *?= 'Image'",
  #"99:class_g = 'Lazpaint'", 
  #"99:class_g = 'Midori'", 
  #"99:name *?= 'Minitube'", 
  #"99:class_g = 'Mousepad'",
  #"99:name *?= 'MuseScore'", 
  #"90:name *?= 'Page Info'", 
  #"99:name *?= 'Pale Moon'", 
  #"90:name *?= 'Panel'", 
  #"99:class_g = 'Pinta'", 
  #"90:name *?= 'Restart'", 
  #"50:class_g *?= 'Rofi'",
  #"100:class_g *?= 'Kitty'",
  #"80:class_g *?= 'discord'",
  #"80:class_g *?= 'spotify'",
  #"80:class_g *?= 'qbittorrent'",
  "100:window_type = 'dock'",
  #"99:name *?= 'sudo'", 
  #"99:name *?= 'Screenshot'", 
  #"99:class_g = 'Viewnior'", 
  #"99:class_g = 'VirtualBox'", 
  #"99:name *?= 'VLC'", 
  #"99:name *?= 'Write'", 
  #"93:class_g = 'URxvt' && !_NET_WM_STATE@:32a", 
  #"0:_NET_WM_STATE@:32a *= '_NET_WM_STATE_HIDDEN'", 
  #"96:_NET_WM_STATE@:32a *= '_NET_WM_STATE_STICKY'" 
  ];
#+end_src
* Fading
#+begin_src conf
  # make stuff fade in and out
  fading = true;
  fade-in-step = 0.10;
  fade-out-step = 0.10;

  # Specify a list of conditions of windows that should not be faded.
  fade-exclude = [ ];
#+end_src
* Other
#+begin_src conf
  # Try to detect WM windows and mark them as active.
  mark-wmwin-focused = true;
  # Mark all non-WM but override-redirect windows active (e.g. menus).
  mark-ovredir-focused = true;
  # Use EWMH _NET_WM_ACTIVE_WINDOW to determine which window is focused instead of using FocusIn/Out events.
  # Usually more reliable but depends on a EWMH-compliant WM.
  use-ewmh-active-win = true;
  # Detect rounded corners and treat them as rectangular when --shadow-ignore-shaped is on.
  detect-rounded-corners = true;

  # Detect _NET_WM_OPACITY on client windows, useful for window managers not passing _NET_WM_OPACITY of client windows to frame windows.
  # This prevents opacity being ignored for some apps.
  # For example without this enabled my xfce4-notifyd is 100% opacity no matter what.
  detect-client-opacity = true;

  # Specify refresh rate of the screen.
  # If not specified or 0, picom will try detecting this with X RandR extension.
  refresh-rate = 0;

  # Vertical synchronization: match the refresh rate of the monitor
  vsync = false;

  # Enable DBE painting mode, intended to use with VSync to (hopefully) eliminate tearing.
  # Reported to have no effect, though.
  dbe = false;

  # Limit picom to repaint at most once every 1 / refresh_rate second to boost performance.
  # This should not be used with --vsync drm/opengl/opengl-oml as they essentially does --sw-opti's job already,
  # unless you wish to specify a lower refresh rate than the actual value.
  #sw-opti = true;

  # Unredirect all windows if a full-screen opaque window is detected, to maximize performance for full-screen windows, like games.
  # Known to cause flickering when redirecting/unredirecting windows.
  unredir-if-possible = false;

  # Use WM_TRANSIENT_FOR to group windows, and consider windows in the same group focused at the same time.
  # detect-transient = true;
  # Use WM_CLIENT_LEADER to group windows, and consider windows in the same group focused at the same time.
  # WM_TRANSIENT_FOR has higher priority if --detect-transient is enabled, too.
  # detect-client-leader = false;
#+end_src
** Focus Excludes
Specify a list of conditions of windows that should always be considered focused.
#+begin_src conf
  focus-exclude =  [
  "class_g = 'Cairo-clock'",
# "role = 'browser'"
  ];
#+end_src
* Window Type Settings
#+begin_src conf
  wintypes : 
  {
  tooltip : 
  {
  fade = true;
  shadow = false;
  opacity = 0.85;
  focus = true;
  };
  fullscreen : 
  {
  fade = true;
  shadow = false;
  opacity = 1;
  focus = true;
  };
  };
#+end_src
* XSync
See: https://github.com/yshui/picom/commit/b18d46bcbdc35a3b5620d817dd46fbc76485c20d
Use X Sync fence to sync clients' draw calls. Needed on nvidia-drivers with GLX backend for some users.
#+begin_src conf
  xrender-sync-fence = true;
#+end_src
